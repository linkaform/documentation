=====================
Desarrollo de scripts
=====================

El desarrollo de scripts se realiza en Python, esta se encuentra dentro de la carpeta de infosync_scripts, la estructura de los scripts es la siguiente:

+----------------------------+-------------------------------------------------------------+
| Archivo                    | Descripción                                                 |
+----------------------------+-------------------------------------------------------------+
| reporte_datosPorConocer.py | Esta contiene la lógica de negocios que se encargará de     |
|                            | procesar las peticiones y generar una respuesta a través    |
|                            | de la API de Linkaform.                                     |
+----------------------------+-------------------------------------------------------------+
| account_settings.py        | Contiene la configuración necesaria para acceder a los      |
|                            | reportes.                                                   |
+----------------------------+-------------------------------------------------------------+


Desarrollo de Scripts
=====================

Para el desarrollo de Scripts es necesario hacer uso de la API de Linkaform, esta se encuentra en su repositorio oficial `api de linkaform <https://github.com/linkaform/linkaform_api/>`_, esta cuenta con algunas ramas, algunas correspondiente a la versión de python que utilizan para su desarrollo. Actualmente se hace uso de la versión 3 de python, para lo que será necesario hacer uso del repositorio con la versión de python 3.0.

Estructura de back
==================

Los scripts correspondientes a los reportes de cada cliente se encuentran en la carpeta **Scripts_report**, dentro de esta carpeta se encuentran una serie de carpetas correspondiente a cada cliente, si se desea agregar un nuevo cliente cuyos reportes necesiten scripts se debe crear una carpeta con su respectivo nombre.

Una vez dentro de la carpeta debe generar los siguientes archivos:

**account_settings.py**: Esta contiene las credenciales y configuraciones necesarias para acceder a esta carpeta.

Lo siguiente que se debe hacer es agregar las de conexión al entorno de producción  y de preproducción.
   
.. code-block:: python

   settings_mongo_host = db2.linkaform.com:27017.db3.linkaform.com:27017.db4.linkaform.com:27017
   settings_mongo_port = 27017
   
Lo siguiente que se debe configurar es la variable de configuración:

.. code-block:: python

   config = {
      'USERNAME': 'correo del cliente/cuenta padre',
      'PASS': '',
      'COLLECTION': 'form_answer',  # Colección para obtener las respuestas de la forma
      'PROTOCOL': 'https',
      'HOST': 'app.linkaform.com',
      'MONGODB_PORT': settings.mongo_port,
      'MONGODB_HOST': settings.mongo_host,
      'MONGODB_USER': 'account_idCuenta',
      'MONGODB_PASSWORD': 'password',
      'PORT': settings.mongo_port,
      'USER_ID': 'id del usuario',
      'ACCOUNT_ID': 'id de la cuenta padre',
      'KEYS_POSITION': {},
      'IS_USING_APIKEY': False,
      'USE_JWT': True,
      'JWT_KEY': '',
      'AUTHORIZATION_EMAIL_VALUE': 'correo del cliente',
      'API_KEY': "apiKey",
   }


La lista anterior, es la configuración estándar de accounts_settings, existen ciertos valores que debe solicitar, como son el el MONGODB_ID; este valor se debe solicitar al administrador de la base de datos.

El API Key es otro valor que se necesita para poder acceder a los reportes, el API_Key es una llave global que permite acceder a la información de los reportes y formas de la cuenta.

Para generar el api key sigue los siguientes pasos:

1. Inicie sesión con la cuenta padre.
2. Acceda a la sección de usuarios que cuenta con la siguiente imagen:

.. image:: /imgs/Reportes/Backend/1.png

3. Identifique el nombre del cliente desde el buscador, el cual se encuentra en la parte superior izquierda:

.. image:: /imgs/Reportes/Backend/2.png

5. Al seleccionar el usuario se mostrarán sus datos personales, en la parte inferior se encontrarán los siguientes botones.

.. image:: /imgs/Reportes/Backend/3.png

6. Seleccione el botón **API Keys**, esta acción generará el API_Key que se necesita en la configuración de account_settings.py.

Existen ciertos estándares que deben considerarse al desarrollar un script.

Después de configurar el archivo de account_settings, genere los archivos **reporte_nombreReporte.py**, por ejemplo, **reporte_visitas.py**.

Configuración del archivo reporte_nombreReporte.py
---------------------------------------------------

El primer paso consiste en importar la `API de Linkaform <https://github.com/linkaform/linkaform_api/tree/3.0/>`_ y librerías útiles para crear la lógica de negocio del reporte. Por ejemplo: 


.. code-block:: python

   import simplejson, sys
   from linkaform_api import settings, network, utils
   from bson import ObjectId
   from time, pltz, math,
   from datetime import datetime, timedelta, date
   from account_settings import *
   from unicodedata import normalize

   table_data = []
   plant = []
   WEEKS = []

   def get_date_query(date_from=None, date_to=None, date_field_id=None):
   def get_visitas(date_from, date_to. promotor):
   def get_format_minutes(checkout, checkin):
   def get_report(date_from, date_to, promotor):
   def get_catalog_promotor(catalog_id):

   if __name__ == '__main__':
      print(sys.argv)
      all_data = simplejson.loads(sys.arv[2])
      #----FILTERS
      data = all_data.get("data", {})
      date_to = data.get('date_to', '')
      date_from = data.get("date_from", '')
      #----Report Model
      report_model = ReportModel()
      if data_to or date_from:
         #----CREDENTIALS----
         settgings.config.update(config)
         lkf_api = utils.Cache(settings)
         net = network.Network(settings)
         #----TOKEN----
         #jwt_complete = simplejson.loads(sys.arvg[2])
         #config['USER_JWT_KEY'] = jwt_key
         #----KEY----
         jwt_key = lkf_api.get_jwt(api_key=settings_config['API_KEY'])
         config["USER_JWT_KEY"] = jwt_key
         cr = net.get_collections()
         #----FUNCTIONS----
         data_from_cosecha = query_report_form_first(date_from, date_to)
         date_from_recepcion = query_report_form_second(date_from, date_to)
         get_formal_firstElement(data_form_cosecha, data_from_recepcion)
         #Debug --- print(report_model.print())
         sys.stdout.write(simplejson.dumps(report_model.print()))
      else:
         sys.stdout.write(simplejson.dumps({"json": {}}))

El script comienza a ejecutarse desde main, la función print permite generar un log que permite debugear el script, el log es un mensaje que brinda información relacionada con las variables utilizadas, parámetros usados y resultado del script.
Para visualizar el log se debe realizar el siguiente proceso.

1. Diríjase a su cuenta.
2. Seleccione el segundo botón de la barra lateral izquierda, esta acción debe mostrar el siguiente menú:

.. image:: /imgs/Reportes/Backend/4.png

3. Una vez dentro, puede encontrar una lista de Scripts, si hay scripts va a encontrar los siguientes íconos correspondientes a cada script, para visualizar el log, seleccione el ícono de documento, correspondiente a los log del scrip como se muestra a continuación:

.. image:: /imgs/Reportes/Backend/5.png

4. Al seleccionar el ícono, se desplegará una bitácora correspondiente a los logs por cada vez que se ejecutó el script, esta bitácora tiene ciertos parámetros de mucha importancia, como son la fecha en la que se ejecutó el script, el nombre del script, el estatus el cuál es terminado, el siguiente parámetro es **Exitoso**; puede tener dos valores, **Exitoso** en caso de ejecutarse correctamente o puede ser **Fallido** en caso de ocurrir algún problema en la ejecución del script.

.. image:: /imgs/Reportes/Backend/6.png

5. El log tiene el siguiente formato:

.. code-block:: python

	==== LOG FOR SCRIPT nombre_script.py ==== 
	Host: swarm2.lkf.cloud 
	Start Date: 2023-07-01 21:10:09.718236+00:00 
	End Date: 2023-07-01 21:10:11.046309+00:00 
	=========== TRACEBACK ============= 
	Traceback (most recent call last):
	  File "entorno/backend-linkaform/nombre_script.py", line 100, in <module>
	    current_record['answers'] = nombre_script(current_record)
	  File "entorno/backend-linkaform/nombre_script.py", line 31, in validaciones_solicitud
	    if get_restricted_date(dia_salida):
	  File "entorno/backend-linkaform/nombre_script.py", line 13, in get_restricted_date
	    'form_id': lkm.form_id('nombre_form', 'id'),
	AttributeError: 'LKFModules' object has no attribute 'form_id'
	=========== END ============= 
	
	=========== OUTPUT ============= 
	es un error del tipo lkf
	['entorno/backend-linkaform/nombre_script.py', '{"form_id": 123, "user_id": 2, "user_name": "nombre_usuario", "geolocation":}','{"jwt: "jwt", codigo, False "}', false "}"]
	dia salida 2023-08-01
	==============================

.. important:: 
   El siguiente arreglo esta compuesto de tres elementos, de los cuales el tercero o de la posición [2] es de suma importancia, ya que  se almacenará en la variable **all_data** del script. Cabe aclarar que el siguiente arreglo es un ejemplo del contenido del log, pero representa completamente la estructura real.

   ['entorno/backend-linkaform/nombre_script.py', '{"form_id": 123, "user_id": 2, "user_name": "nombre_usuario", "geolocation":}','{"jwt: "jwt", codigo, False "}', false "}"]

6. En la función principal **main** existen ciertos estándares que se deben considerar, las cuales son las siguientes:

**Filtros:** Consiste en definir los parámetros que servirán para depurar la data, pueden ser un rango de fechas (date_to, date_from) o una fecha en específica, entre otros, estos filtros dependerán de los requerimientos del reporte. 

.. note::
   En python el método get es empleado para obtener el valor de la clave de un diccionario, esta función se comporta de la siguiente manera:

   1. Si la clave existe devuelve su valor.
   2. Si la clave no existe devuelve ``None``, excepto si se define un valor por defecto, pero nunca devuelve un error.

   En esta línea de código ``date_from = data.get("date_from", ' ')``, si la clave "date_from" existe; devuelve su valor, si no existe devuelve ' ' (un string vacío).


**Modelo del reporte**: Se define una la variable ``report_model`` que será un objeto de la clase ``ReportModel()``, la cuál se encarga de definir la estructura del modelo del reporte. Esta clase se define a continuación.
   
.. code-block:: python

   class ReportModel():
      def __init__(self):
         self.json = {
            "firstElement":{
               "data":[],
            },
         }
      def print(self):
         res = {'json':{}}
         for x in self.json:
            res["json"][x] = self.json[x]
   return res
   
**Credenciales**: Se deben generar variables que definan las credenciales a partir del diccionario de **config**.

**Token:** Si la autenticación se realiza a partir del token, la variable **jwt_complete** toma el token que se devuelve y lo guarda en la propiedad  **USER_JWT_KEY** del config.

**API Key:** SI la autenticación se desea realizar a partir de la api key, la variable **jwt_key** se iguala al método **get_jwt** de la api **lkt_api**; el método recibe como parámetro una variable api_key igual al valor de la propiedad **API_KEY** del setting, a apartir de la api_key que recibe el método **get_jwt** crea un token y ese token se almacena en la variable **jwt_key**. Posteriormete el valor de la variable  **jwt_key** se define como el valor **USER_JWT_KEY** de config.

La siguiente variable ``cr = net.get_collections()``, es un estándar que habilita el acceso a las colecciones. 

**Ejecuciones:** Se llaman las funciones correspondientes a gestionar la petición creando la query, las funciones se definen bajo el estándar de python snake_case. A continuación, se definen tres funciones, dos de estas se guardan en sus respectivas variables indicando que retornaran un valor. Analicemos la primera función.
      
.. code-block:: python
   
   data_from_cosecha = query_report_form_first(date_from, date_to)
   date_from_recepcion = query_report_form_second(date_from, date_to)
   get_formal_firstElement(data_form_cosecha, data_from_recepcion)

La función recibe dos parámetros, el cuerpo de la función tiene el siguiente estándar:

1. Define la variable **report_model** como global.
2. La variable **match_query** define la estructura de un filtro global que se ejecutará en todas las peticiones. El primer elemento consiste en definir la clave **"form_id"** que recibe el id de la forma que se desea consultar, la clave **"deleted_at"** es igual a un filtro propio de mongodb que devuelve valores únicos.

El siguiente código es una función que recibe dos parámetros: date_from y date_to, y luego construye una consulta basada en estos parámetros para recuperar datos de la base de datos.

.. code-block:: python

   # ----- FUNCTION QUERYS ------
   def query_report_form_first(date_from, date_to):
      global report_model

      # Construye la consulta inicial con un filtro en la colección form_id y sin registros eliminados
      match_query = {
         "form_id": 213,
         "deleted_at": {"$exists": False},
      }

      # Agrega filtros adicionales basados en los valores de date_from y date_to
      if date_from and '--' not in date_from:
         match_query.update({"answers.id": {'$gte': date_from}})
      if date_to and '--' not in date_to:
         match_query.update({'answers.id': {'$lte': date_to}})
      if date_from and '--' not in date_from and date_to and '--' not in date_to:
         match_query.update({'answers.id': {'$gte': date_from, '$lte': date_to}})

      # Define la consulta
      query = [
         {"$match": match_query},
         {"$project": {
               "_id": 0,
               "folio": "$folio",
               "record_id": "$_id",
               "lote": "$answers.id.id",
               "tipo_cacao": "$answers.id",
               "fecha_cosecha": "$answers.id",
               "operario": "$answers.idCampo",
               "num_canecas": "$answers.idCatalogo.idCampodecatalogo"
         }},
         {"$sort": {"created_at": 1}}
      ]

      data = []
      result = cr.aggregate(query)  # Realiza la consulta utilizando la agregación
      data = [x for x in result]

      return data  # Devuelve los datos resultantes

.. important:: 
   Las peticiones se hacen a una base de datos no relacional  mongodb, esta base datos hace uso del formato BSON; similar a JSON para construir la estructura de sus datos llamados documentos, por lo que las consultas deben realizarse con ese formato, en Python se utilizan los diccionarios ya que es una estructura análoga a un formato JSON.

El códgido anterior define los filtros que pueden llegar a cambiar, estos se identifican porque están dentro de una estructura de control ``if``, en el primer condicional si existe el campo ``date_from`` se actualiza el diccionario ``match_query`` y se agrega el siguiente filtro: 

``answers.id_del_campo": {'$gte': date_from}``, el filtro hace uso del operador ``$lgte`` (greater than or equal) para obtener solo los registros que sean mayores o igual a ``date_from``.

Posteriormente define la consulta a la base de datos, esta se realiza como una lista de diccionarios que se almacenan en la variable query, el primer diccionario define el primer filtro: 

**match**: esto limita el número de documentos que devuelve la consulta, disminuyendo el costo de procesamiento de la base de datos.

**Filtro**: consiste en el **document**, este filtro genera una serie de documentos que definen solo los campos y metadatos específicos, esto porque un documento puede contener una serie de campos innecesarios en la consulta.

**sort**: ordena los registros respecto a una variable, esta utiliza el concepto de ordenamiento ascendente con un 1 y descendente con un 0.

Luego se define la variable ``data`` con una lista vacía, esta lista almacenará el resultado que se retornará la función.

Después se realiza la consulta a la base de datos con el método aggregate(query), esto devuelve un cursor que se almacena en la variable result.

.. important::
   En mongodb éxiste un concepto llamado etapas de agregación, donde $match, $group, $sort, $limit, $project, $count, $set y $out corresponden a una serie de etapas que procesan los documentos y devuelven un resultado calculado. Para conocer a detalle cada una de estas etapas consulte las `operaciones de agregación <https://www.mongodb.com/docs/manual/aggregation/>`_.

.. note::
   Un cursor es una lista de los documentos que devuelve la base de datos a partir de la consulta.

Posteriormente en la siguiente línea de código: ``data = [x for x in result]`` se recorre a través de un for y se almacena el resultado en la lista **data**.

Finalmente se retorna la lista **data**.

